trigger:
  branches:
    include:
      - main
variables:
  imageName: 'jmuachifi/sre-challenge-argocd'
  dockerHubServiceConnection: 'docker-hub-connection' # Replace with your Docker Hub service connection name
  dockerfilePath: '**/Dockerfile'
  tag: $(Build.BuildId)
  latestTag: latest

stages:
  - stage: Code_Check
    jobs:
      - job: CodeCheck
        displayName: Code Quality Check
        pool:
          vmImage: ubuntu-latest
        steps:
          - script: |
              python -m pip install --upgrade pip
              pip install flake8
            displayName: Install dependencies
          - script: >-
              flake8 src/ --count --select=E9,F63,F7,F82 --show-source
              --statistics
            displayName: Run Code Quality Checks

  - stage: Docker_Login
    dependsOn: Code_Check
    jobs:
      - job: DockerLogin
        displayName: 'Docker Login'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            displayName: 'Log in to Docker Hub'
            inputs:
              command: 'login'
              containerRegistry: 'docker-hub-connection'  # Docker service connection in Azure DevOps
    displayName: Docker Login stage

  - stage: Build_Push
    dependsOn: Docker_Login
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: $(dockerHubServiceConnection)
          repository: $(imageName)
          command: 'buildAndPush'
          Dockerfile: $(dockerfilePath)
          tags: |
            $(tag)
            $(latestTag)
    displayName: Build and push stage

  #- stage: Security_Check
  #  dependsOn: Build_Image
  #  jobs:
  #    - job: SecurityCheck
  #      displayName: Run Security Scan with Trivy
  #      pool:
  #        vmImage: ubuntu-latest
  #      steps:
  #        - script: >
  #            echo "Updating Trivy vulnerability database..."
#
  #            docker run --rm -v $(System.DefaultWorkingDirectory):/root/.cache/
  #            aquasec/trivy:latest image --download-db-only
  #          displayName: Preload Trivy Vulnerability Database
  #        - script: >
  #            echo "Running Trivy vulnerability scanner..."
#
  #            docker run --rm -v $(System.DefaultWorkingDirectory):/root/.cache/
  #            aquasec/trivy:latest image --exit-code 0
  #            $(imageName):$(Build.SourceVersion)
  #          displayName: Run Trivy Vulnerability Scan


  #- stage: Publish_Image
  #  dependsOn: Docker_Login
  #  jobs:
  #    - job: PushDockerImage
  #      displayName: 'Push Docker Image to Docker Hub'
  #      pool:
  #        vmImage: 'ubuntu-latest'
  #      steps:
  #        - task: Docker@2
  #          displayName: 'Push Docker Image to Docker Hub'
  #          inputs:
  #            command: 'push'
  #            tags: |
  #              $(imageName):$(Build.SourceVersion)
  #              $(imageName):latest

  - stage: Update_Kustomization
    dependsOn: Build_Push
    jobs:
      - job: UpdateKustomization
        displayName: Update Kustomization with New Image Tag
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
          
          - script: |
              git config --global user.email "azure-devops@portal-azure.com"
              git config --global user.name "Azure DevOps"
              
              # Clone the repository
              git clone https://$(AZURE_PAT)@dev.azure.com/boostcloudexpert/AzureDevOpsDemo/_git/sre-challenge-argocd.git
              cd sre-challenge-argocd

              # Update the kustomization.yaml file
              # sed -i "s/newTag:.*/newTag: $(Build.BuildId)/" k8s/kustomization.yaml
              sed -i "s/newTag:.*/newTag: \"$(Build.BuildId)\"/" k8s/kustomization.yaml || exit 1

              # Commit and push changes
              git add k8s/kustomization.yaml
              git commit -m "Update image tag to $(Build.BuildId) [skip ci]" || exit 1
              git push origin HEAD:main || exit 1
            displayName: Update kustomization.yaml with new image tag


